package eg.edu.alexu.csd.datastructure.iceHockey.cs16;
import java.awt.*;
public class PlayersFinder implements IPlayersFinder {

	private static char array1[][];
	private static char array2[][];
	private static int maxX;
	private static int maxY;
	private static int minX;
	private static int minY;
	private static int numOfSquares;
	// array2 is used to avoid check of checked squares again while searching for colours of players.
	
	
	public static void check(int i,int j,char team) {
		numOfSquares=numOfSquares+4;
		System.out.println(numOfSquares);
		array2[i][j]=1;
		if(i+1<array1.length&&array1[i+1][j]==team&&array2[i+1][j]!=1) {
			if((i+1)>maxY) {maxY=(i+1);}
		check(i+1,j,team);
						}
		
		if(i-1>=0&&array1[i-1][j]==team&&array2[i-1][j]!=1) {
			if((i-1)<minY) {minY=(i-1);}
			check(i-1,j,team);
								}
		
		if(j+1<array1[0].length&&array1[i][j+1]==team&&array2[i][j+1]!=1) {
			if((j+1)>maxX) {maxX=(j+1);}
			check(i,j+1,team);
						}
		
		if(j-1>=0&&array1[i][j-1]==team&&array2[i][j-1]!=1) {
			if((j-1)<minX) {minX=(j-1);}
			check(i,j-1,team);
						
							}
		
		return ;
	}
	
	
	public java.awt.Point[] findPlayers(String[] photo, int team, int threshold){
		if(photo==null) {
			return null;
		}//if image is null the function return null.
		// if image is empty the function it will return null.
		if(photo.length==0) {
		System.out.println("the image is empty");
			return null;
		}
		
		array1=new char[photo.length][photo[0].length()];
		array2=new char[photo.length][photo[0].length()];
		
		int numOfPlayers=0;
		Point [] centres=new Point[1000];
		char colourOfTeam=(char)(team+'0');
		for(int i =0;i<photo.length;i++) {
			for(int j=0;j<photo[1].length();j++) {
				
			array1[i][j]=photo[i].charAt(j);//transfering characters to a 2d array.
				System.out.print(array1[i][j]+" ");
		
			}System.out.println();
			
		}
		
		for(int i =0;i<photo.length;i++) {
			for(int j=0;j<photo[1].length();j++) {
				if(array1[i][j]==colourOfTeam&&array2[i][j]!=1) {
					numOfSquares=0;
					maxX=minX=j;
					maxY=minY=i;
					check(i,j,colourOfTeam);
					if(numOfSquares>=threshold) {
					
					int xCenter=(maxX+1+minX);
					int yCenter=(minY+1+maxY);
					System.out.println(xCenter+" "+yCenter);
					
					centres[numOfPlayers]=new Point(xCenter,yCenter);
						numOfPlayers++;
					}
					
				
				}
			
				
			
				}
			
			}
		
		for(int i=0;i<(numOfPlayers);i++) {
			
			System.out.println(centres[i]);
			
		}
		Point temp=new Point();
		//sorting the array according to x_cordinates and if they are equal look for y coordinate
		//with time complexity O(n^2).
		for(int i=0;i<numOfPlayers;i++) {
			for(int j=i+1;j<numOfPlayers;j++) {
				if(centres[i].x>centres[j].x) {
					temp=centres[i];
					centres[i]=centres[j];
					centres[j]=temp;
				}else if(centres[i].x==centres[j].x) {
					if(centres[i].y>centres[j].y) {
						temp=centres[i];
						centres[i]=centres[j];
						centres[j]=temp;
						
					}
				}
				
			}
		}
		System.out.println("let's compare");
for(int i=0;i<(numOfPlayers);i++) {
			
			System.out.println(centres[i]);
			
		}
		return centres;
	
	}
	
public static void main(String [] args) {
	PlayersFinder test=new PlayersFinder();
	String [] photo= {"88NKMG8N8E8JI88",
			"888NS8EU88HN8EO",
			"LUQ888A8TH8OIH8",
			"888QJ88R8SG88TY",
			"88ZQV88B88OUZ8O",
			"FQ88WF8Q8GG88B8",
			"8S888HGSB8FT8S8",
			"8MX88D88888T8K8",
			"8S8A88MGVDG8XK8",
			"M88S8B8I8M88J8N",
			"8W88X88ZT8KA8I8",
			"88SQGB8I8J88W88",
			"U88H8NI8CZB88B8",
			"8PK8H8T8888TQR8"};
	test.findPlayers(photo,8,9);
	
	
	
}	
	
	
}

